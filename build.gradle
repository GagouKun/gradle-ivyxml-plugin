buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.admc:gradle-javaPropFile-plugin:1.0.0'
    }
}

apply plugin: 'groovy'
apply plugin: 'com.admc.javaPropFile'

defaultTasks 'jar'

// GroovyCompile setting defaults to this, but has no effect since current
// Groovy compiler can't do later than 1.5.
//project.ext.set('targetCompatibility', '1.5')
compileGroovy.targetCompatibility =  '1.5'

def localGradleFile = file('local.gradle')
if (localGradleFile.isFile()) {
    logger.info('''Executing optional build file 'local.gradle'.''')
    apply from: localGradleFile
}

// Defaults that can be overridden with property files:
project.ext.set('org.name', System.properties['user.name'])
project.ext.set('jar.title', 'Customization')

propFileLoader.typeCasting=true
propFileLoader.traditionalPropertiesInit()

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'org.apache.ivy:ivy:2.4.0'

    testCompile 'junit:junit:4.12'
}

task noop {
    description = 'Noop task for Gradle testing'
}

processResources {
    // Add license file to META-INF subdir
    copy {
        from 'doc'
        into new File(sourceSets.main.output.resourcesDir, 'META-INF')
        include 'LICENSE.txt'
    }
    println 'done'
}

jar { doFirst {
    // metaInf property apparently gone with Gradle 2.0
    //project.metaInf << files('doc/LICENSE.txt')
    jar { manifest { attributes(
        'Specification-Title': 'Ivyxml Gradle Plugin',
        'Specification-Version': project.property('spec.version'),
        'Specification-Vendor': 'Axis Data Management Corp.',
        'Implementation-Title': project.property('jar.title'),
        'Implementation-Version': project.version,
        'Implementation-Vendor': project.property('org.name')
    ) } }
} }

task checkTabs {
    description = 'Reports on any text files containing tab characters'
    FileTree tree = fileTree(dir: '..')
    tree.exclude '**/.*/**'
    tree.include  '*.*'
    tree.include  'doc/*'
    tree.include  'src/**'
    def tabFiles = []
    tree.each { if (it.text.indexOf('\t') > -1) tabFiles << relativePath(it) }
    if (tabFiles.size() > 0) println '  ' + tabFiles.join('\n  ')
}

task sourcesJar(type: Jar, dependsOn:classes) {
    description = 'Build sources jar files'
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    description = 'Build javadoc jar file'
    classifier = 'javadoc'
    from javadoc.destinationDir
}
